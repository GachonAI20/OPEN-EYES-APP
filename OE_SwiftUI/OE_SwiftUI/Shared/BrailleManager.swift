//
//  BrailleManager.swift
//  OE_SwiftUI
//
//  Created by 서정덕 on 2023/05/23.
//

import Foundation
import SwiftUI

class BrailleManager {
    static let shared = BrailleManager()
    private init() {
        
    }
    
    /// 일반 String 받아서 점자 Int arr로 반환. 입력: "Hello", 출력: [[0,1,1,0,0,0],[0,0,0,1,1,0]]
    /// 처음 str이 바인딩 될때, str값이 변경될 때 두 번 호출됨
    func convert(str string: String) -> [[Int]]{
        print("convert")
        var str: String
        /// 소문자로 저장된 일반 String
        str = string.lowercased()
        /// 반환할 배열, ["100011", "010010"]의 형식을 갖고있음
        var returnValue: [[Int]] = []
        /// [글자: 점자] 딕셔너리
        let eng2Braille: [Character: Character] = [
            "a": "⠁", "b": "⠃", "c": "⠉", "d": "⠙",
            "e": "⠑", "f": "⠋", "g": "⠛", "h": "⠓",
            "i": "⠊", "j": "⠚", "k": "⠅", "l": "⠇",
            "m": "⠍", "n": "⠝", "o": "⠕", "p": "⠏",
            "q": "⠟", "r": "⠗", "s": "⠎", "t": "⠞",
            "u": "⠥", "v": "⠧", "w": "⠺", "x": "⠭",
            "y": "⠽", "z": "⠵",
            " ": "⠀", ".": "⠲", ",": "⠂",
            "?": "⠦", "!": "⠖", ";": "⠆",
            ":": "⠒", "-": "⠤", "/": "⠌",
            "0": "⠴", "1": "⠂", "2": "⠆", "3": "⠒",
            "4": "⠲", "5": "⠢", "6": "⠖", "7": "⠶",
            "8": "⠦", "9": "⠔"
        ]
        ///  [점자: 이진수] 딕셔너리
        let braille2IntArr: [Character: [Int]] = [
            "⠀": [0,0,0,0,0,0], "⠁": [0,0,0,0,0,1],
            "⠂": [0,0,0,0,1,0], "⠃": [0,0,0,0,1,1],
            "⠄": [0,0,0,1,0,0], "⠅": [0,0,0,1,0,1],
            "⠆": [0,0,0,1,1,0], "⠇": [0,0,0,1,1,1],
            "⠈": [0,0,1,0,0,0], "⠉": [0,0,1,0,0,1],
            "⠊": [0,0,1,0,1,0], "⠋": [0,0,1,0,1,1],
            "⠌": [0,0,1,1,0,0], "⠍": [0,0,1,1,0,1],
            "⠎": [0,0,1,1,1,0], "⠏": [0,0,1,1,1,1],
            "⠐": [0,1,0,0,0,0], "⠑": [0,1,0,0,0,1],
            "⠒": [0,1,0,0,1,0], "⠓": [0,1,0,0,1,1],
            "⠔": [0,1,0,1,0,0], "⠕": [0,1,0,1,0,1],
            "⠖": [0,1,0,1,1,0], "⠗": [0,1,0,1,1,1],
            "⠘": [0,1,1,0,0,0], "⠙": [0,1,1,0,0,1],
            "⠚": [0,1,1,0,1,0], "⠛": [0,1,1,0,1,1],
            "⠜": [0,1,1,1,0,0], "⠝": [0,1,1,1,0,1],
            "⠞": [0,1,1,1,1,0], "⠟": [0,1,1,1,1,1],
            "⠠": [1,0,0,0,0,0], "⠡": [1,0,0,0,0,1],
            "⠢": [1,0,0,0,1,0], "⠣": [1,0,0,0,1,1],
            "⠤": [1,0,0,1,0,0], "⠥": [1,0,0,1,0,1],
            "⠦": [1,0,0,1,1,0], "⠧": [1,0,0,1,1,1],
            "⠨": [1,0,1,0,0,0], "⠩": [1,0,1,0,0,1],
            "⠪": [1,0,1,0,1,0], "⠫": [1,0,1,0,1,1],
            "⠬": [1,0,1,1,0,0], "⠭": [1,0,1,1,0,1],
            "⠮": [1,0,1,1,1,0], "⠯": [1,0,1,1,1,1],
            "⠰": [1,1,0,0,0,0], "⠱": [1,1,0,0,0,1],
            "⠲": [1,1,0,0,1,0], "⠳": [1,1,0,0,1,1],
            "⠴": [1,1,0,1,0,0], "⠵": [1,1,0,1,0,1],
            "⠶": [1,1,0,1,1,0], "⠷": [1,1,0,1,1,1],
            "⠸": [1,1,1,0,0,0], "⠹": [1,1,1,0,0,1],
            "⠺": [1,1,1,0,1,0], "⠻": [1,1,1,0,1,1],
            "⠼": [1,1,1,1,0,0], "⠽": [1,1,1,1,0,1],
            "⠾": [1,1,1,1,1,0], "⠿": [1,1,1,1,1,1]
        ]
        
        // 입력받은 문자열의 각 글자를 순회하면서 점자로 변환하고,
        // 점자를 이진 숫자 배열로 변환하여 반환할 배열에 추가
        print("점자로 변환:")
        for i in 0..<str.count {
            // 입력받은 문자열에서 i번째 글자를 가져옴
            let char: Character = str.getChar(at: i)
            // i번째 글자에 해당하는 점자 문자를 딕셔너리에서 찾음 braille: "⠗"
            if let braille: Character = eng2Braille[char] {
                print(braille, terminator: "")
                // 점자 문자에 해당하는 이진 숫자 배열을 반환할 배열에 추가
                returnValue.append(braille2IntArr[braille]!)
            } else {
                if braille2IntArr[char] != nil{
                    print(char, terminator: "")
                    returnValue.append(braille2IntArr[char]!)
                }
            }
        }
        print("")
        // 변환된 이진 숫자 2DArr을 반환
        print(returnValue)
        return returnValue
    }
    
    /// 터치 좌표 받아서 읽고있는 점자 번호 반환
    func getIdx(_ location: CGPoint, geo: GeometryProxy) -> Int {
        let cellWidth = geo.size.width / 2
        let cellHeight = geo.size.height / 3
        let col = Int(location.x / cellWidth)
        let row = Int(location.y / cellHeight)
        // 오버플로우 막음
        var returnValue: Int = row + col * 3
        if returnValue < 0 { returnValue = 0 }
        if returnValue > 5 { returnValue = 5 }
        return returnValue
    }
    
}
